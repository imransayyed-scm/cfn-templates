AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Combined CFN to force RDS failover, update security group, wait for RDS availability,
  and register EC2s to ALB Target Groups via Lambda.

Parameters:
  DBInstanceIdentifier:
    Type: String
    Description: RDS DB instance identifier

Resources:

  RDSFailoverAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SSM-RDS-Failover-AutomationRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowRDSAndEC2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:RebootDBInstance
                  - ec2:AuthorizeSecurityGroupIngress
                  - rds:DescribeDBInstances
                  - lambda:InvokeFunction
                Resource: "*"

  RegisterTargetsLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RegisterTargetsLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RegisterTargetsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - elasticloadbalancing:RegisterTargets
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  RegisterTargetsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: RegisterTargetsAfterRDSAvailable
      Handler: index.handler
      Runtime: python3.12
      Role: !GetAtt RegisterTargetsLambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3, json

          def handler(event, context):
              elbv2 = boto3.client('elbv2')

              targets = [
                  {
                      'TargetGroupArn': 'arn:aws:elasticloadbalancing:ap-south-1:467660529422:targetgroup/Posidex-DC-DR-UI-Test-TG/4c14bd8b597d3c33',
                      'Targets': [{'Id': '172.28.7.144', 'Port': 8089}]
                  },
                  {
                      'TargetGroupArn': 'arn:aws:elasticloadbalancing:ap-south-1:467660529422:targetgroup/Posidex-DC-DR-Tomcat-Test-TG/d6c5c09915e2a791',
                      'Targets': [
                          {'Id': '172.28.7.144', 'Port': 8089},
                          {'Id': '172.28.7.181', 'Port': 8089}
                      ]
                  },
                  {
                      'TargetGroupArn': 'arn:aws:elasticloadbalancing:ap-south-1:467660529422:targetgroup/Posidex-DC-DR-Tokengen-Test-TG/57d9afda9a9c0fbe',
                      'Targets': [{'Id': '172.28.7.144', 'Port': 2405}]
                  }
              ]

              for group in targets:
                  elbv2.register_targets(
                      TargetGroupArn=group['TargetGroupArn'],
                      Targets=group['Targets']
                  )
              return {"status": "success"}

  RDSFailoverSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: RDS-Force-Failover
      DocumentType: Automation
      DocumentFormat: YAML
      UpdateMethod: NewVersion
      Content:
        description: |
          RDS failover + SG update + register EC2s to TGs via Lambda
        schemaVersion: '0.3'
        assumeRole: '{{ AutomationAssumeRole }}'
        parameters:
          DBInstanceIdentifier:
            type: String
            description: RDS DB Instance Identifier
          AutomationAssumeRole:
            type: String
            description: IAM Role for Automation

        mainSteps:
          - name: RebootRDS
            action: aws:executeAwsApi
            inputs:
              Service: rds
              Api: RebootDBInstance
              DBInstanceIdentifier: '{{ DBInstanceIdentifier }}'
              ForceFailover: true

          - name: AddIngressForDR1
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: AuthorizeSecurityGroupIngress
              GroupId: sg-01fe63d5cf1d626e9
              IpPermissions:
                - IpProtocol: tcp
                  FromPort: 3306
                  ToPort: 3306
                  IpRanges:
                    - CidrIp: 172.28.7.144/32
                      Description: PosidexDR-test-1

          - name: AddIngressForDR2
            action: aws:executeAwsApi
            inputs:
              Service: ec2
              Api: AuthorizeSecurityGroupIngress
              GroupId: sg-01fe63d5cf1d626e9
              IpPermissions:
                - IpProtocol: tcp
                  FromPort: 3306
                  ToPort: 3306
                  IpRanges:
                    - CidrIp: 172.28.7.181/32
                      Description: PosidexDR-test-2

          - name: WaitForRDSAvailable
            action: aws:waitForAwsResourceProperty
            inputs:
              Service: rds
              Api: DescribeDBInstances
              DBInstanceIdentifier: '{{ DBInstanceIdentifier }}'
              PropertySelector: '$.DBInstances[0].DBInstanceStatus'
              DesiredValues:
                - available

          - name: InvokeRegisterLambda
            action: aws:invokeLambdaFunction
            inputs:
              FunctionName: RegisterTargetsAfterRDSAvailable
              Payload: '{"DBInstanceIdentifier":"{{ DBInstanceIdentifier }}"}'

Outputs:
  SSMDocumentName:
    Value: !Ref RDSFailoverSSMDocument
  AutomationRoleArn:
    Value: !GetAtt RDSFailoverAutomationRole.Arn
  LambdaFunctionName:
    Value: !Ref RegisterTargetsLambda